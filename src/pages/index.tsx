import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";

const CreatePost = () => {
  const { user } = useUser();
  if (!user) return null;
  return (
    <div className="flex">
      <img
        src={user?.profileImageUrl}
        alt="Profile pic"
        className="h-48 w-48 rounded-full"
      />
    </div>
  );
};

const Home: NextPage = () => {
  const user = useUser();

  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const { data, isLoading } = api.posts.getAll.useQuery();
  if (isLoading) {
    return <div>Loading..</div>;
  }
  if (!data) {
    return <div>Something went wrong</div>;
  }
  return (
    <>
      <Head>
        <title>Twitter-Emoji</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/icons8-twitter-16.png" />
      </Head>
      <main className="flex justify-center">
        <div className="h-screen w-full border-x border-slate-400 md:max-w-2xl">
          <div className="flex border-b border-slate-400 p-4 ">
            {!user.isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {!!user.isSignedIn && <CreatePost />}
            {!!user.isSignedIn && <SignOutButton />}
          </div>
          <div className="flex flex-col">
            {data?.map((post) => (
              <div className="border-b border-slate-400 p-8 " key={post.id}>
                {post.content}
              </div>
            ))}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

////AUTH
const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
